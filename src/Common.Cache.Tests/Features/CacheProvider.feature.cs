// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Common.Cache.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("cache provider")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class CacheProviderFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "cache provider", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CacheProvider.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("simple cache scenario")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.TestCaseAttribute("Memory", "key_1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Memory", "key_2", "128", null)]
        [NUnit.Framework.TestCaseAttribute("Memory", "key_3", "1024", null)]
        [NUnit.Framework.TestCaseAttribute("Memory", "key_4", "16348", null)]
        [NUnit.Framework.TestCaseAttribute("Memory", "Key_5", "5242880", null)]
        [NUnit.Framework.TestCaseAttribute("Csv", "key_6", "0", null)]
        [NUnit.Framework.TestCaseAttribute("Csv", "key_7", "128", null)]
        [NUnit.Framework.TestCaseAttribute("Csv", "key_8", "1024", null)]
        [NUnit.Framework.TestCaseAttribute("Csv", "key_9", "16348", null)]
        [NUnit.Framework.TestCaseAttribute("Csv", "Key_10", "5242880", null)]
        public async System.Threading.Tasks.Task SimpleCacheScenario(string cacheProvider, string key, string size, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "prod"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CacheProvider", cacheProvider);
            argumentsOfScenario.Add("key", key);
            argumentsOfScenario.Add("size", size);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("simple cache scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync(string.Format("cache provider \"{0}\" is registered", cacheProvider), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Size"});
                table1.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", size)});
#line 6
    await testRunner.GivenAsync("store a cached item with ttl of 5 minutes", ((string)(null)), table1, "Given ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Size"});
                table2.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", size)});
#line 9
    await testRunner.ThenAsync("I can validate the cached item", ((string)(null)), table2, "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Size"});
                table3.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", size)});
#line 12
    await testRunner.AndAsync("cached item should still be valid after 4 minutes", ((string)(null)), table3, "And ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Size"});
                table4.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", size)});
#line 15
    await testRunner.AndAsync("cached item should be expired after 2 minutes", ((string)(null)), table4, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("hybrid cache scenario")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.TestCaseAttribute("C001", "100", "Joe", "Doe", "1990-01-01", null)]
        public async System.Threading.Tasks.Task HybridCacheScenario(string key, string id, string firstName, string lastName, string birthDay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "prod"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Key", key);
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("BirthDay", birthDay);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("hybrid cache scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
    await testRunner.GivenAsync("cache provider \"Hybrid\" is registered", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Id",
                            "FirstName",
                            "LastName",
                            "BirthDay"});
                table5.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", id),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", birthDay)});
#line 35
    await testRunner.GivenAsync("store a customer with ttl of 5 minutes", ((string)(null)), table5, "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Id",
                            "FirstName",
                            "LastName",
                            "BirthDay"});
                table6.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", id),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", birthDay)});
#line 38
    await testRunner.ThenAsync("I can validate customer", ((string)(null)), table6, "Then ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Key"});
                table7.AddRow(new string[] {
                            string.Format("{0}", key)});
#line 41
    await testRunner.AndAsync("cached customer should still be valid after 4 minutes", ((string)(null)), table7, "And ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Key"});
                table8.AddRow(new string[] {
                            string.Format("{0}", key)});
#line 44
    await testRunner.AndAsync("cached customer should be expired after 2 minutes", ((string)(null)), table8, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("windows registry cache scenario")]
        [NUnit.Framework.CategoryAttribute("prod")]
        [NUnit.Framework.TestCaseAttribute("C021", "123", "Joe", "Doe", "1990-01-01", null)]
        public async System.Threading.Tasks.Task WindowsRegistryCacheScenario(string key, string id, string firstName, string lastName, string birthDay, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "prod"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Key", key);
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("BirthDay", birthDay);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("windows registry cache scenario", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 54
    await testRunner.GivenAsync("cache provider \"WindowsRegistry\" is registered", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Id",
                            "FirstName",
                            "LastName",
                            "BirthDay"});
                table9.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", id),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", birthDay)});
#line 55
    await testRunner.GivenAsync("store a customer with ttl of 5 minutes", ((string)(null)), table9, "Given ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Id",
                            "FirstName",
                            "LastName",
                            "BirthDay"});
                table10.AddRow(new string[] {
                            string.Format("{0}", key),
                            string.Format("{0}", id),
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", birthDay)});
#line 58
    await testRunner.ThenAsync("I can validate customer", ((string)(null)), table10, "Then ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Key"});
                table11.AddRow(new string[] {
                            string.Format("{0}", key)});
#line 61
    await testRunner.AndAsync("cached customer should still be valid after 4 minutes", ((string)(null)), table11, "And ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Key"});
                table12.AddRow(new string[] {
                            string.Format("{0}", key)});
#line 64
    await testRunner.AndAsync("cached customer should be expired after 2 minutes", ((string)(null)), table12, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
